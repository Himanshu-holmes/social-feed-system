package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/himanshu-holmes/social-feed-system/graph/model"
	"github.com/himanshu-holmes/social-feed-system/proto"
)

// GetTimeline is the resolver for the getTimeline field.
func (r *queryResolver) GetTimeline(ctx context.Context, userID string) ([]*model.Post, error) {
	resp,err := r.PostClient.ListPostsByUser(ctx, &proto.ListPostsRequest{UserId: userID})
	if err != nil {
		fmt.Println("Error while calling ListPostsByUser", err)
		return nil, err
	}
	var posts []*model.Post
	// get most recent 20 post
	if len(resp.Posts) > 20 {
		resp.Posts = resp.Posts[:20]
	}else{
		resp.Posts = resp.Posts[:len(resp.Posts)]
	}

	for _,post := range resp.Posts {
		posts = append(posts, &model.Post{
			ID: post.Id,
			Content: post.Content,
			Timestamp: post.Timestamp.AsTime().String(),
			Author: &model.User{
				ID: post.AuthorId,
			},
		})
	}
	return posts, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
type mutationResolver struct{ *Resolver }
*/
